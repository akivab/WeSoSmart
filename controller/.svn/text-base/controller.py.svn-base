import re
import urllib
import urllib2
import hashlib

from django.utils import simplejson
# for the GetBooks section
import xml.parsers.expat
# for the PrintDB, ClearDB, and InitialSetup sections
from model.model import Book
from model.model import Picture
from model.model import Section
from model.model import Class
from model.model import User
from model.model import UserClasses
from model.model import ClassBooks
from model.model import db
from google.appengine.ext.db import Key
from google.appengine.ext import webapp

class GetData(webapp.RequestHandler):
    def post(self):
        toreturn = []
        if(self.request.get("dept")):
            dept = self.request.get("dept");
            if(re.match(r'[A-Z]{4}', dept)):
                    courses = Class.gql("WHERE dept=:1 ORDER BY name ASC", dept)
                    for k in courses:
                        toreturn.append(str(k.key()))
                        toreturn.append(k.number+ ": "+ k.name);
        elif(self.request.get("course")):
            course = self.request.get("course");
            myclass = Class.get(Key(course))
            sections = Section.gql("WHERE class_id=:1 ORDER BY semester DESC",myclass)
            toreturn.append(myclass.dept)
            toreturn.append(myclass.number)
            toreturn.append(myclass.name)
            for k in sections:
                prof_ids = UserClasses.gql("WHERE section_id=:1 AND relationship=:2",k,UserClasses().PROFESSOR)
                instructors = []
                for p in prof_ids:
                    prof = p.user_id
                    instructors.append(str(prof.key()))
                    instructors.append(prof.name)
                if(instructors):
                    toreturn.append(instructors)
                else:
                    toreturn.append(getst(k.instructor, "No instructor found"))
                toreturn.append(getst(k.location, "No location found"))
                toreturn.append(getst(k.class_time, "No time found"))
                toreturn.append(getst(str(k.key()), "No key found"))
                toreturn.append(getst(k.semester, "No semester found"))
        elif(self.request.get("books")):
            course = self.request.get("books")
            myclass = Class.get(Key(course))
            sections = Section.gql("WHERE class_id=:1",myclass)
            for k in sections:
                books = ClassBooks.gql("WHERE section_id=:1",k)
                if(books):
                    for book in books:
                        b = book.book_id
                        if not b.picture or not b.prev:
                            GetBooks().setBookInfo(b)
                        toreturn.append(str(b.picture.link))
                        toreturn.append(str(b.prev))
                        toreturn.append(b.title)
                        toreturn.append(b.author)
                        toreturn.append(b.description)
                        toreturn.append("%.2f" % b.price)
                        toreturn.append(str(book.book_id.key()))
        self.response.out.write(simplejson.dumps(toreturn))
def getst(string, default):
    if(string):
        return string
    else:
        return default
class BookXmlHandler:
    def __init__ (self):
        self.p = xml.parsers.expat.ParserCreate()
        self.p.CharacterDataHandler = self.characters
        self.p.StartElementHandler = self.startElement
        self.p.EndElementHandler = self.endElement
        self.to_set = None
        self.image = None
        self.title = None
        self.author = None
        self.description = None
        self.prev = None
    def parse(self, xml_data):
        self.p.Parse(xml_data)
    def startElement(self, name, attrs):
        if(name == "dc:title"):
            self.to_set = "title"
        elif(name == "dc:creator"):
            self.to_set = "author" 
        elif(name == "dc:description"):
            self.to_set = "description"
        elif(name == "link" and re.search(r'thumbnail',attrs["rel"])):
            self.image = str(attrs["href"])
        elif(name == "link" and re.search(r'preview|info',attrs["rel"])):
            self.prev = str(attrs["href"])
    def characters(self, chars):
        if(self.to_set == "author"):
            if(self.author):
                self.author = self.author + ", "+chars
            else:
                self.author = chars
        elif(self.to_set == "title"):
            if(self.title):
                self.title = self.title + ": " +  chars
            else:
                self.title = chars
        elif(self.to_set == "description"):
            if(self.description):
                self.description = self.description + " " + chars
            self.description = chars 
    def endElement(self, name):
        self.to_set = None
    def printAll(self):
        print self.title
        print self.author
        print self.description
        print self.image
        print self.prev

    def setBook(self,b):
        b.title = self.title
        b.author = self.author
        b.description = self.description
        pic = b.getPictureLink()
        if not pic:
            pic = Picture(link = self.image)
            pic.put()
        b.picture = pic
        b.prev = self.prev
        b.put()

class GetBooks(webapp.RequestHandler):
    def __init__(self):
        self.auth = "DQAAAIAAAACBf59pzN1f-1J2df0a7s7TI0bLEHZt8bIGP2UvbyUE-lmmob5pZuBH3jJFuipMTNtfTCTOoOFQ7klle3j3Um7HUmxvojhtBLhlgGRhqiL8lORZUpKTCWZFhoZ3KekNb1CakVjXhShuQeVMfx219BIP2B94SEg4op68prAM6cG5AA"
        self.base_url = 'http://books.google.com/books/feeds/volumes?q=isbn:'
        self.headers = { 'Authorization' : 'GoogleLogin auth='+self.auth }
    def setBookInfo(self, b):
        isbn = b.isbn
        url = self.base_url + isbn + "&lr=en"
        req = urllib2.Request(url, None, self.headers);
        response = urllib2.urlopen(req)
        the_page = response.read()
        parser = BookXmlHandler()
        parser.parse(the_page)
        parser.setBook(b)
    def get(self):
        url = self.base_url+self.request.get("isbn")+"&lr=en"
        req = urllib2.Request(url, None, self.headers)
        response = urllib2.urlopen(req)
        the_page = response.read()
        parser = BookXmlHandler()
        parser.parse(the_page)
        parser.printAll()
    
class ClearDB(webapp.RequestHandler):
    def get(self):        
        password = self.request.get("pass")
        print password
        m = hashlib.sha256()
        m.update(password)
        if(m.hexdigest() == '158189b0767fc7104d28a1848ca958828136ed4692cafa4120f49f49d836bd61'):
            db.delete(db.GqlQuery("SELECT *"))
            m = urllib2.urlopen("http://www.cs.columbia.edu/~ab2928/urls.out")
            for i in m.readlines():
                if(re.match('http',i)):
                    urllib2.urlopen(i)
        else:
            self.redirect("/") 
        
class PrintDB(webapp.RequestHandler):
    def get(self):
        print "<br>"
        print ''.join(['-' for _ in xrange(36)]),"Books",''.join(['-' for _ in xrange(36)])
        print "<br>"
        for k in Book.all():
            print k.isbn,"|",k.title, "|", k.price
            print "<br>"
        print ''.join(['-' for _ in xrange(36)]),"Classes",''.join(['-' for _ in xrange(36)])
        print "<br>"
        for k in Class.all():
            if(k.name):
                print k.name, "|", k.dept, "|", k.dept_name
                print "<br>"
        print ''.join(['-' for _ in xrange(36)]),"Users",''.join(['-' for _ in xrange(36)])
        print "<br>"
        for k in User.all():
            print k.name
            print "<br>"
        print ''.join(['-' for _ in xrange(36)]),"Sections",''.join(['-' for _ in xrange(36)])
        print "<br>"
        for k in Section.all():
            print k.section_key, "|", k.instructor
            print "<br>"
        print ''.join(['-' for _ in xrange(36)]),"UserClasses",''.join(['-' for _ in xrange(36)])
        print "<br>"
        for k in UserClasses.all():
            print "UserClass Entry"
            print "<br>"
        print ''.join(['-' for _ in xrange(36)]),"ClassBooks",''.join(['-' for _ in xrange(36)])
        print "<br>"
        for k in ClassBooks.all():
            print "ClassBooks Entry"
            print "<br>"
        print ''.join(['-' for _ in xrange(80)])
        print "<br>"
        
class InitialSetup(webapp.RequestHandler):
    def get(self):
        l = []
        type = self.request.get("type") 
        for i in self.request.arguments():
            if(i != "type"):
                l.append((i, self.request.get(i)))
        if(type == "profs"):
            self.addProf(l)
        elif(type == "books"):
            self.addBook(l)
        elif(type == "section"):
            self.addSection(l)
        print self.request.query_string
    def addProf(self, data):
        section_key = self.request.get("section")
        section = Section.gql("WHERE section_key = :1", section_key).get()
        for attr in data:
            if(attr[0] == "name"):
                name_ = attr[1]
            elif(attr[0] == "email"):
                m = re.match(r'(\S+)', attr[1])
                mail_ = m.group(1)
        professor = User.gql("WHERE cubmail = :1", db.Email(mail_)).get()
        if not professor:
            professor = User(name = name_, cubmail = db.Email(mail_), level = 2)
            professor.put()
        userclasses = UserClasses.gql("WHERE user_id = :1 AND section_id=:2", professor, section).get()
        if not userclasses:
            userclasses = UserClasses(user_id = professor, section_id = section, relationship = UserClasses().PROFESSOR)
            userclasses.put()
                
        
    def addBook(self, data):
        section_key = self.request.get("section")
        section = Section.gql("WHERE section_key = :1", section_key).get()
        for attr in data:
            print attr
            if(attr[0] == "req"):
                req_ = attr[1]
            elif(attr[0] == "isbn"):
                isbn_ = attr[1]
            elif(attr[0] == "title"):
                title_ = attr[1]
            elif(attr[0] == "author"):
                author_ = attr[1]
            elif(attr[0] == "price"):
                price_ = float(attr[1])
        book = Book.gql("WHERE isbn = :1", isbn_).get()
        if not book:
            book = Book(isbn = isbn_, title = title_, author = author_, price = price_)
            book.put()
        classbooks = ClassBooks.gql("WHERE book_id=:1 AND section_id=:2", book, section).get()
        if not classbooks:
            classbooks = ClassBooks(req = req_, book_id = book, section_id = section)
            classbooks.put()
            
    def addSection(self, data):
        dept_ = ""
        dept_name_ = ""
        points_ = ""
        number_ = ""
        division_ = ""
        instructor_ = ""
        open_to_ = ""
        campus_ = ""
        section_ = ""
        location_ = ""
        time_ = ""
        approvals_ = ""
        note_ = ""
        section_key_ = ""
        call_num_ = ""
        name_ = ""
        type_ = ""
        for datum in data:
            # department information
            if(len(datum) > 0 and datum[0] == "Dept"):
                dept_ = datum[1]
            elif(len(datum) > 0 and datum[0] == "Department"):
                dept_name_raw = datum[1]
                dept_name_ = re.search(r'^([^,]+)', dept_name_raw).group(1)
            elif(len(datum) > 0 and datum[0] == "Points"):
                points_ = datum[1]
            elif(len(datum) > 0 and datum[0] == "Number"):
                number_ = datum[1]  
            elif(len(datum) > 0 and datum[0] == "Division"):
                division_ = datum[1]
            elif(len(datum) > 0 and datum[0] == "Open To"):
                open_to_ = datum[1]
            elif(len(datum) > 0 and datum[0] == "Type"):
                type_ = datum[1]
            elif(len(datum) > 0 and datum[0] == "Title"):
                name_ = datum[1]
            elif(len(datum) > 0 and datum[0] == "Campus"):
                campus_ = datum[1]
            
            # section information
            elif(len(datum) > 0 and datum[0] == "Section"):
                section_ = datum[1]
            elif(len(datum) > 0 and datum[0] == "Semester"):
                semester_ = datum[1]
            elif(len(datum) > 0 and datum[0] == "Location"):
                location_ = datum[1]
            elif(len(datum) > 0 and datum[0] == "Time"):
                time_ = datum[1]
            elif(len(datum) > 0 and datum[0] == "Instructor"):
                instructor_ = datum[1]              
            elif(len(datum) > 0 and datum[0] == "Approvals Required"):
                approvals_ = datum[1]  
            elif(len(datum) > 0 and datum[0] == "Note"):
                note_ = datum[1]
            elif(len(datum) > 0 and datum[0] == "Section key"):
                section_key_ = datum[1]
            elif(len(datum) > 0 and datum[0] == "Call Number"):
                call_num_ = datum[1]              
        
        myclass = Class.gql("WHERE dept = :1 and number = :2", dept_, number_).get()
        if not myclass:
            myclass = Class(dept = dept_,
                            dept_name = dept_name_,
                            points = points_,
                            number = number_,
                            division = division_,
                            name = name_,
                            type = type_,
                            open_to = open_to_,
                            campus = campus_)
            myclass.put()
        mysection = Section.gql("WHERE section_key = :1", section_key_).get()
        if not mysection:
            mysection = Section(section = section_,
                                semester = semester_,
                                call_num = call_num_,
                                approvals = approvals_,
                                instructor = instructor_,
                                location = location_,
                                class_time = time_,
                                note = note_,
                                section_key = section_key_,
                                class_id = myclass)
            mysection.put()